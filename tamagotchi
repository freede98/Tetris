#include <pic32mx.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define DISPLAY_VDD PORTFbits.RF6
#define DISPLAY_VBATT PORTFbits.RF5
#define DISPLAY_COMMAND_DATA PORTFbits.RF4
#define DISPLAY_RESET PORTGbits.RG9


#define DISPLAY_VDD_PORT PORTF
#define DISPLAY_VDD_MASK 0x40
#define DISPLAY_VBATT_PORT PORTF
#define DISPLAY_VBATT_MASK 0x20
#define DISPLAY_COMMAND_DATA_PORT PORTF
#define DISPLAY_COMMAND_DATA_MASK 0x10
#define DISPLAY_RESET_PORT PORTG
#define DISPLAY_RESET_MASK 0x200

volatile int * trise = (volatile int *) 0xbf886100;
volatile int * porte = (volatile int *) 0xbf886110;
int writeRow = 0;

char textbuffer[4][16];

static const uint8_t const empty_space[] = {
255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,

255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,

255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,

255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,

255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,
};

const uint8_t const emoji[][64] = {{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
		255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
		63, 207, 247, 251, 237, 213, 238, 254, 254, 238, 213, 237, 251, 247, 207, 63,
	  252, 243, 239, 221, 189, 186, 119, 119, 119, 119, 186, 189, 221, 239, 243, 252},
	{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
			255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
			127, 143, 247, 251, 237, 237, 237, 254, 254, 237, 237, 237, 251, 247, 143, 127,
		254, 241, 239, 223, 189, 189, 189, 125, 125, 189, 189, 189, 223, 239, 241, 254},
	{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
			255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
			127, 143, 247, 251, 245, 229, 237, 254, 254, 237, 229, 245, 251, 247, 143, 127,
		254, 241, 239, 223, 183, 187, 189, 125, 125, 189, 187, 183, 223, 239, 241, 254}};

const uint8_t const smiley[] = {
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	63, 207, 247, 251, 237, 213, 238, 254, 254, 238, 213, 237, 251, 247, 207, 63,
  252, 243, 239, 221, 189, 186, 119, 119, 119, 119, 186, 189, 221, 239, 243, 252 };

const uint8_t const neutral[] = { 127, 143, 247, 251, 237, 237, 237, 254, 254, 237, 237, 237, 251, 247, 143, 127,
254, 241, 239, 223, 189, 189, 189, 125, 125, 189, 189, 189, 223, 239, 241, 254,};

const uint8_t const angry[] = {127, 143, 247, 251, 245, 229, 237, 254, 254, 237, 229, 245, 251, 247, 143, 127,
254, 241, 239, 223, 189, 187, 189, 125, 125, 189, 187, 189, 223, 239, 241, 254,};

void delay(int cyc) {
	int i;
	for(i = cyc; i > 0; i--);
}

uint8_t spi_send_recv(uint8_t data) {
	while(!(SPI2STAT & 0x08));
	SPI2BUF = data;
	while(!(SPI2STAT & 0x01));
	return SPI2BUF;
}

int timecounter = 0;

void initialise_timer(){
	T2CON = 0x70;
	PR2 = (80000000 / 256) / 10;
	TMR2 = 0;
	T2CONSET = 0x8000;

	PORTDINV = 0x0fe0;
	//*trise = *trise & 0xff00;
volatile int * trise = (volatile int*) 0xbf886100;
	if(IFS(0) & 0x100)
		{
			timecounter += 1;
			TMR2 = 0;
			IFSCLR(0) = 0x0100;
		}
	volatile int * porte = (volatile int*) 0xbf886110;
	*porte = 255;
}

void display_init() {

	DISPLAY_COMMAND_DATA_PORT &= ~DISPLAY_COMMAND_DATA_MASK;
	delay(10);
	DISPLAY_VDD_PORT &= ~DISPLAY_VDD_MASK;
	delay(1000000);

	spi_send_recv(0xAE);
	DISPLAY_RESET_PORT &= ~DISPLAY_RESET_MASK;
	delay(10);
	DISPLAY_RESET_PORT |= DISPLAY_RESET_MASK;
	delay(10);

	spi_send_recv(0x8D);
	spi_send_recv(0x14);

	spi_send_recv(0xD9);
	spi_send_recv(0xF1);

	DISPLAY_VBATT_PORT &= ~DISPLAY_VBATT_MASK;
	delay(10000000);

	spi_send_recv(0xA1);
	spi_send_recv(0xC8);

	spi_send_recv(0xDA);
	spi_send_recv(0x20);

	spi_send_recv(0xAF);
}

void display_string(int line, char *s) {
	int i;
	if(line < 0 || line >= 4)
		return;
	if(!s)
		return;

	for(i = 0; i < 16; i++)
		if(*s) {
			textbuffer[line][i] = *s;
			s++;
		} else
			textbuffer[line][i] = ' ';
}

void display_image(int x, const uint8_t *data) {
	int i, j;

	for(i = 0; i < 4; i++) {
		DISPLAY_COMMAND_DATA_PORT &= ~DISPLAY_COMMAND_DATA_MASK;
		spi_send_recv(0x22);
		spi_send_recv((i-writeRow));

		spi_send_recv(x & 0xF);
		spi_send_recv(0x10 | ((x >> 4) & 0xF));

		DISPLAY_COMMAND_DATA_PORT |= DISPLAY_COMMAND_DATA_MASK;

		for(j = 0; j < 16; j++)//j < 96
			spi_send_recv(~data[i*16 + j]); //i*96
	}
}

void display_update() {
	int i, j, k;
	int c;
	for(i = 0; i < 4; i++) {
		DISPLAY_COMMAND_DATA_PORT &= ~DISPLAY_COMMAND_DATA_MASK;
		spi_send_recv(0x22);
		spi_send_recv(i);

		spi_send_recv(0x0);
		spi_send_recv(0x10);

		DISPLAY_COMMAND_DATA_PORT |= DISPLAY_COMMAND_DATA_MASK;

		for(j = 0; j < 16; j++) {
			c = textbuffer[i][j];
			if(c & 0x80)
				continue;

			for(k = 0; k < 8; k++)
				spi_send_recv(~empty_space[c*8 + k]);
		}
	}
}

int getbtns(void){
  int buttons = (PORTD >> 5) & 0x07;

  return buttons;
}

int getsw( void )
{
	return PORTD >> 8 & 0xf;
}

int getbtn(void){
  int button = (PORTF >> 1) & 0x1;

  return button;
}

int main(void) {
	/* Set up peripheral bus clock */
	OSCCON &= ~0x180000;
	OSCCON |= 0x080000;

	/* Set up output pins */
	AD1PCFG = 0xFFFF;
	ODCE = 0x0;
	TRISECLR = 0xFF;
	PORTE = 0x0;

	/* Output pins for display signals */
	PORTF = 0xFFFF;
	PORTG = (1 << 9);
	ODCF = 0x0;
	ODCG = 0x0;
	TRISFCLR = 0x70;
	TRISGCLR = 0x200;

	/* Set up input pins */
	TRISDSET = (1 << 8);
	TRISFSET = (1 << 1);

	/* Set up SPI as master */
	SPI2CON = 0;
	SPI2BRG = 4;

	/* Clear SPIROV*/
	SPI2STATCLR &= ~0x40;
	/* Set CKP = 1, MSTEN = 1; */
        SPI2CON |= 0x60;

	/* Turn on SPI */
	SPI2CONSET = 0x8000;

	 display_init();
	 display_update();
	 initialise_timer();

	 volatile int* push_buttons = (volatile int*) getbtns();
	 volatile int* one_button = (volatile int*) getbtn();
	 int swiitch = getsw();
	 int i = 64;

	 while(i != 160) {

		 if(!(*push_buttons) && !(*one_button) && timecounter == 10)
		 {
				 *porte = 127;
		 }

	 if(swiitch == 0)
	 {
	 display_image(i, emoji[0]);
	 if(*push_buttons & 0x4)
	 {
	 	display_image(i, emoji[0]);
	 	delay(30000);
	 	if(i == 0)
	 		i = 128;
	 	else
	 		i--;
	 	display_update();
	 }

	 if(*one_button & 0x1)
	 {
	 	display_image(i, emoji[0]);
	 	delay(30000);
	 	if(i == 128)
	 		i = 0;
	 	else
	 		i++;
	 	display_update();
	 }

	 if(*push_buttons & 0x2)
	 {
	 	writeRow = 2;
	 	display_update();
	 }

	 if(*push_buttons & 0x1)
	 {
	 	writeRow = 0;
	 	display_update();
	 }
	 }
/*xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx*/
	 if(swiitch & 0x1)
	 {
	 	display_image(i, emoji[1]);
	 	if(*push_buttons & 0x4)
	 	{
	 		display_image(i, emoji[1]);
	 		delay(30000);
	 		if(i == 0)
	 			i = 128;
	 		else
	 			i--;
	 		display_update();
	 	}

	 	if(*one_button & 0x1)
	 	{
	 		display_image(i, emoji[1]);
	 		delay(30000);
	 		if(i == 128)
	 			i = 0;
	 		else
	 			i++;
	 		display_update();
	 	}

	 	if(*push_buttons & 0x2)
	 	{
	 		writeRow = 2;
	 		display_update();
	 	}

	 	if(*push_buttons & 0x1)
	 	{
	 		writeRow = 0;
	 		display_update();
	 	}
	 }
/*xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx*/
	 if(swiitch & 0x2)
	 {
	 	display_image(i, emoji[2]);
	 	if(*push_buttons & 0x4)
	 	{
	 		display_image(i, emoji[2]);
	 		delay(30000);
	 		if(i == 0)
	 			i = 128;
	 		else
	 			i--;
	 		display_update();
	 	}

	 	if(*one_button & 0x1)
	 	{
	 		display_image(i, emoji[2]);
	 		delay(30000);
	 		if(i == 128)
	 			i = 0;
	 		else
	 			i++;
	 		display_update();
	 	}

	 	if(*push_buttons & 0x2)
	 	{
	 		writeRow = 2;
	 		display_update();
	 	}

	 	if(*push_buttons & 0x1)
	 	{
	 		writeRow = 0;
	 		display_update();
	 	}
	 }
	 /*xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx*/
}
	 		delay( 300000 );
	 	return 0;

}
