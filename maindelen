#include <pic32mx.h>
#include <stdint.h>

#define DISPLAY_VDD PORTFbits.RF6
#define DISPLAY_VBATT PORTFbits.RF5
#define DISPLAY_COMMAND_DATA PORTFbits.RF4
#define DISPLAY_RESET PORTGbits.RG9


#define DISPLAY_VDD_PORT PORTF
#define DISPLAY_VDD_MASK 0x40
#define DISPLAY_VBATT_PORT PORTF
#define DISPLAY_VBATT_MASK 0x20
#define DISPLAY_COMMAND_DATA_PORT PORTF
#define DISPLAY_COMMAND_DATA_MASK 0x10
#define DISPLAY_RESET_PORT PORTG
#define DISPLAY_RESET_MASK 0x200

volatile int * trise = (volatile int *) 0xbf886100;
volatile int * porte = (volatile int *) 0xbf886110;

int writeRow = 1;
int emoindex = 0;
int timecounter = 0;
int movement = 0;
int delayBurger = 0;
int tickdownFood = 0;
int tickupAge = 0;
int tickdownWeight = 0;
int movetoscore = 0;
int foodCounter;
int age;
int weight;
int score;
int overfeed = 0;
int poop = 0;
char showPoop = '0';

char textbuffer[4][16];

static const uint8_t const font[] = {
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 4, 3, 4, 3, 0, 0,
	0, 36, 126, 36, 36, 126, 36, 0,
	0, 36, 74, 255, 82, 36, 0, 0,
	0, 70, 38, 16, 8, 100, 98, 0,
	0, 52, 74, 74, 52, 32, 80, 0,
	0, 0, 0, 4, 3, 0, 0, 0,
	0, 0, 0, 126, 129, 0, 0, 0,
	0, 0, 0, 129, 126, 0, 0, 0,
	0, 42, 28, 62, 28, 42, 0, 0,
	0, 8, 8, 62, 8, 8, 0, 0,
	0, 0, 0, 128, 96, 0, 0, 0,
	0, 8, 8, 8, 8, 8, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0,
	0, 64, 32, 16, 8, 4, 2, 0,
	0, 62, 65, 73, 65, 62, 0, 0,
	0, 0, 66, 127, 64, 0, 0, 0,
	0, 0, 98, 81, 73, 70, 0, 0,
	0, 0, 34, 73, 73, 54, 0, 0,
	0, 0, 14, 8, 127, 8, 0, 0,
	0, 0, 35, 69, 69, 57, 0, 0,
	0, 0, 62, 73, 73, 50, 0, 0,
	0, 0, 1, 97, 25, 7, 0, 0,
	0, 0, 54, 73, 73, 54, 0, 0,
	0, 0, 6, 9, 9, 126, 0, 0,
	0, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 128, 102, 0, 0, 0, 0,
	0, 0, 8, 20, 34, 65, 0, 0,
	0, 0, 20, 20, 20, 20, 0, 0,
	0, 0, 65, 34, 20, 8, 0, 0,
	0, 2, 1, 81, 9, 6, 0, 0,
	0, 28, 34, 89, 89, 82, 12, 0,
	0, 0, 126, 9, 9, 126, 0, 0,
	0, 0, 127, 73, 73, 54, 0, 0,
	0, 0, 62, 65, 65, 34, 0, 0,
	0, 0, 127, 65, 65, 62, 0, 0,
	0, 0, 127, 73, 73, 65, 0, 0,
	0, 0, 127, 9, 9, 1, 0, 0,
	0, 0, 62, 65, 81, 50, 0, 0,
	0, 0, 127, 8, 8, 127, 0, 0,
	0, 0, 65, 127, 65, 0, 0, 0,
	0, 0, 32, 64, 64, 63, 0, 0,
	0, 0, 127, 8, 20, 99, 0, 0,
	0, 0, 127, 64, 64, 64, 0, 0,
	0, 127, 2, 4, 2, 127, 0, 0,
	0, 127, 6, 8, 48, 127, 0, 0,
	0, 0, 62, 65, 65, 62, 0, 0,
	0, 0, 127, 9, 9, 6, 0, 0,
	0, 0, 62, 65, 97, 126, 64, 0,
	0, 0, 127, 9, 9, 118, 0, 0,
	0, 0, 38, 73, 73, 50, 0, 0,
	0, 1, 1, 127, 1, 1, 0, 0,
	0, 0, 63, 64, 64, 63, 0, 0,
	0, 31, 32, 64, 32, 31, 0, 0,
	0, 63, 64, 48, 64, 63, 0, 0,
	0, 0, 119, 8, 8, 119, 0, 0,
	0, 3, 4, 120, 4, 3, 0, 0,
	0, 0, 113, 73, 73, 71, 0, 0,
	0, 0, 127, 65, 65, 0, 0, 0,
	0, 2, 4, 8, 16, 32, 64, 0,
	0, 0, 0, 65, 65, 127, 0, 0,
	0, 4, 2, 1, 2, 4, 0, 0,
	0, 64, 64, 64, 64, 64, 64, 0,
	0, 0, 1, 2, 4, 0, 0, 0,
	0, 0, 48, 72, 40, 120, 0, 0, // KaraktÃ¤r a
	0, 0, 127, 72, 72, 48, 0, 0,
	0, 0, 48, 72, 72, 0, 0, 0,
	0, 0, 48, 72, 72, 127, 0, 0,
	0, 0, 48, 88, 88, 16, 0, 0,
	0, 0, 126, 9, 1, 2, 0, 0,
	0, 0, 80, 152, 152, 112, 0, 0,
	0, 0, 127, 8, 8, 112, 0, 0,
	0, 0, 0, 122, 0, 0, 0, 0,
	0, 0, 64, 128, 128, 122, 0, 0,
	0, 0, 127, 16, 40, 72, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 0,				//Bokstav l
	0, 120, 8, 16, 8, 112, 0, 0,	//Bokstav m
	0, 0, 120, 8, 8, 112, 0, 0,
	0, 0, 48, 72, 72, 48, 0, 0,
	0, 0, 248, 40, 40, 16, 0, 0,
	0, 0, 16, 40, 40, 248, 0, 0,
	0, 0, 112, 8, 8, 16, 0, 0,
	0, 0, 72, 84, 84, 36, 0, 0,
	0, 0, 8, 60, 72, 32, 0, 0,
	0, 0, 56, 64, 32, 120, 0, 0,
	0, 0, 56, 64, 56, 0, 0, 0,
	0, 56, 64, 32, 64, 56, 0, 0,
	0, 0, 72, 48, 48, 72, 0, 0,
	0, 0, 24, 160, 160, 120, 0, 0,
	0, 0, 100, 84, 84, 76, 0, 0,
	0, 0, 8, 28, 34, 65, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0,
	0, 0, 65, 34, 28, 8, 0, 0,
	0, 0, 4, 2, 4, 2, 0, 0,
	0, 120, 68, 66, 68, 120, 0, 0,
};

/*static const uint8_t const empty_space[] = {
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,

0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,};*/

//smiley = 0			neutral = 1			angry = 2

const uint8_t const emoticon[][64] = {
{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0x3f, 0xcf, 0xf7, 0xfb, 0xed, 0xd5, 0xee, 0xfe, 0xfe, 0xee, 0xd5, 0xed, 0xfb, 0xf7, 0xcf, 0x3f,
0xfc, 0xf3, 0xef, 0xdd, 0xbd, 0xba, 0x77, 0x77, 0x77, 0x77, 0xba, 0xbd, 0xdd, 0xef, 0xf3, 0xfc,},

{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0x7f, 0x8f, 0xf7, 0xfb, 0xed, 0xed, 0xed, 0xfe, 0xfe, 0xed, 0xed, 0xed, 0xfb, 0xf7, 0x8f, 0x7f,
0xfe, 0xf1, 0xef, 0xdf, 0xbd, 0xbd, 0xbd, 0x7d, 0x7d, 0xbd, 0xbd, 0xbd, 0xdf, 0xef, 0xf1, 0xfe,},

{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0x7f, 0x8f, 0xf7, 0xfb, 0xf5, 0xe5, 0xed, 0xfe, 0xfe, 0xed, 0xe5, 0xf5, 0xfb, 0xf7, 0x8f, 0x7f,
0xfe, 0xf1, 0xef, 0xdf, 0xb7, 0xbb, 0xbd, 0x7d, 0x7d, 0xbd, 0xbb, 0xb7, 0xdf, 0xef, 0xf1, 0xfe,}
};

const uint8_t const hamburger[] =
{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xcf, 0x87, 0x4b, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4b, 0x87, 0xcf, 0xff,
0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff, 0xff,0xff,0xff,0xff,0xff,0xff,0xff};

const uint8_t const lineimage[] =
{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0};

const uint8_t const egg[] =
{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0x7f, 0x9f, 0xef, 0xf7, 0xfb, 0xfb, 0xfd, 0xfd, 0xfb, 0xfb, 0xf7, 0xef, 0x9f, 0x7f, 0xff,
0xff, 0xfe, 0xf9, 0xe7, 0xdf, 0xbf, 0x7f, 0x7f, 0x7f, 0x7f, 0xbf, 0xdf, 0xe7, 0xf9, 0xfe, 0xff};

const uint8_t const crackegg[] =
{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0x73, 0xbd, 0xcf, 0x3f, 0xf3, 0x97, 0xff, 0xff, 0x3d, 0xd9, 0x9f, 0xef, 0x9f, 0x79, 0xff,
0xff, 0xfe ,0xf9, 0xe7, 0xdf ,0xbe ,0x7d, 0x7d, 0x7e, 0x7f, 0xbf ,0xdf, 0xe7 ,0xf9 ,0xfe, 0xff};

const uint8_t const poo[] =
{0xff, 0xf7, 0xcf, 0xbf, 0x4e, 0x49, 0x0f, 0x09, 0x3e, 0x2b, 0x75, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xf9, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf9, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,};

void delay(int cyc) {
	int i;
	for(i = cyc; i > 0; i--);
}

uint8_t spi_send_recv(uint8_t data) {
	while(!(SPI2STAT & 0x08));	//ta emot data
	SPI2BUF = data;
	while(!(SPI2STAT & 0x01));	//return data
	return SPI2BUF;
}

void display_init() {

	DISPLAY_COMMAND_DATA_PORT &= ~DISPLAY_COMMAND_DATA_MASK;
	delay(10);
	DISPLAY_VDD_PORT &= ~DISPLAY_VDD_MASK;
	delay(1000000);

	spi_send_recv(0xAE);
	DISPLAY_RESET_PORT &= ~DISPLAY_RESET_MASK;
	delay(10);
	DISPLAY_RESET_PORT |= DISPLAY_RESET_MASK;
	delay(10);

	spi_send_recv(0x8D);
	spi_send_recv(0x14);

	spi_send_recv(0xD9);
	spi_send_recv(0xF1);

	DISPLAY_VBATT_PORT &= ~DISPLAY_VBATT_MASK;
	delay(10000000);

	spi_send_recv(0xA1);
	spi_send_recv(0xC8);

	spi_send_recv(0xDA);
	spi_send_recv(0x20);

	spi_send_recv(0xAF);
}

void display_string(int line, char *s) {
	int i;
	if(line < 0 || line >= 4)
		return;
	if(!s)
		return;

	for(i = 0; i < 16; i++)
		if(*s) {
			textbuffer[line][i] = *s;
			s++;
		}
		else
			textbuffer[line][i] = ' ';
}

void display_image(int x, const uint8_t *data) {
	int i, j;

	for(i = 0; i < 4; i++) {
		DISPLAY_COMMAND_DATA_PORT &= ~DISPLAY_COMMAND_DATA_MASK;
		if(data == lineimage || data == hamburger || data == poo){
			spi_send_recv(0x22);
			spi_send_recv(i); }

		else{
			spi_send_recv(0x22);
			spi_send_recv((i-writeRow)); }

		spi_send_recv(x & 0xF);
		spi_send_recv(0x10 | ((x >> 4) & 0xF));

		DISPLAY_COMMAND_DATA_PORT |= DISPLAY_COMMAND_DATA_MASK;

		for(j = 0; j < 16; j++)
			spi_send_recv(~data[i*16 + j]);
	}
}

void display_update() {
	int i, j, k;
	int c;
	for(i = 0; i < 4; i++) {
		DISPLAY_COMMAND_DATA_PORT &= ~DISPLAY_COMMAND_DATA_MASK;
		spi_send_recv(0x22);
		spi_send_recv(i);

		spi_send_recv(0x0);
		spi_send_recv(0x10);

		DISPLAY_COMMAND_DATA_PORT |= DISPLAY_COMMAND_DATA_MASK;

		for(j = 0; j < 16; j++) {
			c = textbuffer[i][j];
			if(c & 0x80)
				continue;

			for(k = 0; k < 8; k++)
				spi_send_recv(font[c*8 + k]);
		}
	}
}

void initialise_timer(){
	T2CON = 0x70;
	PR2 = (80000000 / 256) / 10;
	TMR2 = 0;
	//T2CONSET = 0x8000;

	PORTDINV = 0x0fe0;
	*trise = *trise & 0xff00;
	*porte = 0xff;
}

int getbtns(void){
  int buttons = ((PORTD >> 4) & 0xe) | ((PORTF >> 1) & 0x1);

  return buttons;
}

int getsw( void ){
  int switches = (PORTD >> 8) & 0x0f;

  return switches;
}


void tama(int exfood, int exkg, int exage, int expts){
	foodCounter = 0 + exfood;
	weight = 0 + exkg;
	age = 0 + exage;
	score = 0 + expts;
	display_string(0, "            TAMA");
	display_string(1, "            s1:P");
	display_string(2, "            s3:c");
	display_string(3, "            s4:f");
	display_update();
	int cheattimer = 0;
	int cheatstep = 0;
	int i = 40;
	T2CONSET |= 0x8000;
	while(1) {
	volatile int* push_buttons = (volatile int*) getbtns();
	volatile int* switches = (volatile int*) getsw();

	if(IFS(0) & 0x100)
		{
			timecounter++;
			tickdownFood++;
			tickupAge++;
			overfeed--;
			movement--;
			delayBurger--;
			cheattimer--;
			IFS(0) = 0;
		}

	if(tickdownFood > 200){
		foodCounter--;
		tickdownFood = 0;
	}

	if(tickupAge > 400){
		age++;
		score++;
		tickupAge = 0;
	}

	if(tickdownWeight > 50 && weight > 0)
	{
		weight--;
		tickdownWeight = 0;
		score++;
	}

	//smiley = 1			neutral = 2			angry = 3
	display_image(88, lineimage);
	emoindex = 0;

	if(!(*porte & 0x10))
		emoindex = 1;

	if(!(*porte & 0x4))
		emoindex = 2;

	if(/*!(*push_buttons & 0x8) && !(*push_buttons & 0x1)*/
	!(*push_buttons & 0x9) && timecounter > 14)
	{
		*porte = *porte >> 1;
		timecounter = 0;
	}

	if(((*push_buttons & 0x9) || (movement > 0)) &&  timecounter > 4)
	{
		if(*porte < 0xff){
			*porte = (*porte << 1) + 0x1;
			score += ++movetoscore / 10;
			movetoscore = movetoscore % 10;
			tickdownWeight++;
		}
		timecounter = 0;
	}

	display_image(i, emoticon[emoindex]);
	if(*push_buttons & 0x8)
	{
		display_image(i, emoticon[emoindex]);
		delay(50000);
		if(i < 1)
			i = 87;
		else
			i--;
		display_update();
	}

	if(*push_buttons & 0x1)
	{
		display_image(i, emoticon[emoindex]);
		delay(50000);
		if(i > 87)
			i = 1;
		else
			i++;
		display_update();
	}

	if(*push_buttons & 0x4 && writeRow < 2)
	{
		writeRow++;
		movement = 4;
		delay( 500000 );
		display_update();
	}

	if(*push_buttons & 0x2 && writeRow > 0)
	{
		writeRow--;
		movement = 4;
		delay( 500000 );
		display_update();
	}

	if(*switches & 0x8)
		delayBurger = 100;

	if(delayBurger > 0 && !(*switches & 0x8))
		display_image(8, hamburger);

	if((writeRow == 0) && (i == 8) && delayBurger > 0){
		delayBurger = 0;
		foodCounter++;
		weight++;
		if( overfeed < 0)
			score++;
		overfeed = 10;
		poop++;
	}

	if(poop > 4)
		display_image(79, poo);

	if(*switches & 0x4){
		if(poop > 4 && showPoop == '1')
			poop = 0;
		showPoop = '0';}

	if(!(*switches & 0x4) && showPoop == '0')
		showPoop = '1';

	if ((*push_buttons || *switches) && cheattimer < 1)
		switch (cheatstep) {
			case 0:if(*push_buttons & 0x4)
								cheattimer = 100;
							else
								cheatstep = 0;
							break;

			case 1:if(*push_buttons & 0x4)
								cheattimer = 100;
							else
								cheatstep = 0;
							break;

			case 2:if(*push_buttons & 0x2)
								cheattimer = 100;
							else if(*push_buttons & 0x4)
								cheatstep = 2;
							else
								cheatstep = 0;
							break;

			case 3:if(*push_buttons & 0x2)
								cheattimer = 100;
							else
								cheatstep = 0;
							break;

			case 4:if(*push_buttons & 0x8)
								cheattimer = 100;
							else
								cheatstep = 0;
							break;
			case 5:if(*push_buttons & 0x1)
								cheattimer = 100;
							else
								cheatstep = 0;
							break;
			case 6:if(*push_buttons & 0x8)
								cheattimer = 100;
							else
								cheatstep = 0;
						break;
			case 7:if(*push_buttons & 0x1)
								cheattimer = 100;
							else
								cheatstep = 0;
						break;
			case 8:if(*switches & 0x8)
								cheattimer = 100;
							else
								cheatstep = 0;
							break;
			case 9:if(*switches & 0x4)
								cheattimer = 100;
							else
								cheatstep = 0;
							break;
			//default: cheatstep = 0;
		}
		if(!(*switches) && !(*push_buttons) && cheattimer > 0){
			cheattimer = 0;
			cheatstep++;
		}

		if(cheatstep == 10 /*|| *switches & 0x4*/){
			T2CONSET &= ~0x8000;
			cheatface(foodCounter, weight, age, score);
		}

	if(*switches & 0x1){
		T2CONSET &= ~0x8000;
		interface(foodCounter, age, weight, score);
	}

	if(/**switches & 0x2 ||	*/(age > 29 || weight > 49 || foodCounter < 1)){
		gameover(score);
	}

	}
	return;
}



int main(void) {

	/* Set up peripheral bus clock*/
	OSCCON &= ~0x180000;
	OSCCON |= 0x080000;

	/* Set up output pins*/
	AD1PCFG = 0xFFFF;
	ODCE = 0x0;
	TRISECLR = 0xFF;
	PORTE = 0x0;

	/* Output pins for display signals*/
	PORTF = 0xFFFF;
	PORTG = (1 << 9);
	ODCF = 0x0;
	ODCG = 0x0;
	TRISFCLR = 0x70;
	TRISGCLR = 0x200;

	/* Set up input pins*/
	TRISDSET = (1 << 8);
	TRISFSET = (1 << 1);

	/* Set up SPI as master*/
	SPI2CON = 0;
	SPI2BRG = 4;

	/* Clear SPIROV*/
	SPI2STATCLR &= ~0x40;
	/* Set CKP = 1, MSTEN = 1;*/
        SPI2CON |= 0x60;

	/* Turn on SPI */
	SPI2CONSET = 0x8000;

initialise_timer();
display_init();
display_update();
display_image(44, egg);
delay(15000000);
display_image(44, crackegg);
delay(15000000);
display_image(44, emoticon[0]);
delay(15000000);
tama(5,0,0,0);

	for(;;) ;
	return 0;
}
